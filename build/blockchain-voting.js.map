{"version":3,"file":"blockchain-voting.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/lookup-set.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { serializeValueWithOptions } from \"../utils\";\n/**\n * A lookup set collection that stores entries in NEAR storage.\n */\nexport class LookupSet {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     * @param options - Options for storing data.\n     */\n    contains(key, options) {\n        const storageKey = this.keyPrefix + serializeValueWithOptions(key, options);\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Returns true if the element was present in the set.\n     *\n     * @param key - The entry to remove.\n     * @param options - Options for storing data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + serializeValueWithOptions(key, options);\n        return near.storageRemove(storageKey);\n    }\n    /**\n     * If the set did not have this value present, `true` is returned.\n     * If the set did have this value present, `false` is returned.\n     *\n     * @param key - The value to store in the collection.\n     * @param options - Options for storing the data.\n     */\n    set(key, options) {\n        const storageKey = this.keyPrefix + serializeValueWithOptions(key, options);\n        return !near.storageWrite(storageKey, \"\");\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param keys - The elements to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keys, options) {\n        keys.forEach((key) => this.set(key, options));\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupSet(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, encode, decode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this._keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this._keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this._keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this._keys.push(key);\n            this.values.set(key, [decode(serialized), newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [decode(serialized), oldIndex]);\n        return getValueWithOptions(encode(oldValue), options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this._keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this._keys.isEmpty() && index !== this._keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this._keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this._keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this._keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map._keys = new Vector(`${data.prefix}u`);\n        map._keys.length = data._keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n    keys({ start, limit }) {\n        const ret = [];\n        if (start === undefined) {\n            start = 0;\n        }\n        if (limit == undefined) {\n            limit = this.length - start;\n        }\n        for (let i = start; i < start + limit; i++) {\n            ret.push(this._keys.get(i));\n        }\n        return ret;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap._keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [\n                key.value,\n                getValueWithOptions(encode(valueAndIndex[0]), this.options),\n            ],\n        };\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import {\n  NearBindgen,\n  near,\n  call,\n  view,\n  UnorderedMap,\n  initialize,\n  assert,\n  TextEncoder,\n  LookupSet,\n} from \"near-sdk-js\";\nimport { sha256 } from \"near-sdk-js/lib/api\";\n\n@NearBindgen({ requireInit: true })\nexport class VotingContract {\n  owner_id: string = \"\";\n  relayer_id: string = \"\";\n  voting_keys: UnorderedMap<boolean> = new UnorderedMap<boolean>(\"voting-keys\");\n  voters: LookupSet<string> = new LookupSet<string>(\"voters\");\n  voting_options: UnorderedMap<number> = new UnorderedMap<number>(\n    \"vote-options\"\n  );\n  register_time: number = 0;\n  vote_time: number = 0;\n\n  @initialize({})\n  init({ _owner_id, _relayer_id, _register_time, _vote_time }) {\n    this.owner_id = _owner_id;\n    this.relayer_id = _relayer_id;\n    this.register_time = _register_time;\n    this.vote_time = _vote_time\n  }\n\n  constructor() {}\n\n  @call({})\n  addVotingKey({ _secret_key }) {\n    const caller_id = near.predecessorAccountId();\n\n    assert(\n      caller_id == this.relayer_id,\n      \"Only relayer account can add voting Keys\"\n    );\n\n    const keyExists: boolean | null = this.voting_keys.get(_secret_key);\n\n    if (keyExists == null) {\n      near.log(\"Secret key successfully added.\");\n      this.voting_keys.set(_secret_key, false);\n      return true;\n    } else {\n      near.log(\"Secret key is already added.\");\n      return false;\n    }\n  }\n\n  @view({})\n  viewVotingKeys() {\n    return this.voting_keys._keys.toArray();\n  }\n\n  @view({})\n  viewTimeLimits() {\n    return JSON.stringify({vote_time: this.vote_time, register_time: this.register_time});\n  }\n\n  @call({})\n  registerVoter() {\n    const caller_id = near.predecessorAccountId();\n    const voterExists = this.voters.contains(caller_id);\n\n    if (voterExists) {\n      near.log(\"Voter already registered.\");\n      return false;\n    } else {\n      this.voters.set(caller_id);\n      return true;\n    }\n  }\n\n  @view({})\n  viewVoters() {\n    return this.voters;\n  }\n\n  @call({})\n  addVotingOption({ _voting_option }) {\n    const caller_id = near.predecessorAccountId();\n\n    assert(\n      caller_id == this.owner_id,\n      \"Only owner account can add voting options.\"\n    );\n\n    const optionsExists: number | null =\n      this.voting_options.get(_voting_option);\n\n    if (optionsExists == null) {\n      this.voting_options.set(_voting_option, 0);\n      return true;\n    } else {\n      near.log(\"Voting option already added.\");\n      return false;\n    }\n  }\n\n  @view({})\n  viewVotingOptions() {\n    return this.voting_options.toArray();\n  }\n\n  @call({})\n  castVote({ _secret_key, _vote_option }) {\n    const caller_id = near.predecessorAccountId();\n\n    assert(\n      caller_id == this.relayer_id,\n      \"Voting can only be executed through a relayer account.\"\n    );\n\n\n    const encoder = new TextEncoder();\n    const encodedText = encoder.encode(_secret_key);\n    const hash = sha256(encodedText);\n    const hexHash = hash.toString();\n    \n    const keyExists: boolean | null = this.voting_keys.get(hexHash);\n\n    if (keyExists == null) {\n      near.log(\"Secret key not valid.\");\n      return {result: false, error: \"Secret key not valid.\"};\n    } else {\n      if (keyExists) {\n        near.log(\"Secret key already used.\");\n        return {result: false, error: \"Secret key already used.\"};\n      }\n    }\n\n    const optionsExists: number | null = this.voting_options.get(_vote_option);\n\n    if (optionsExists == null) {\n      near.log(\"Option does not exist.\");\n      return false;\n    } else {\n      this.voting_keys.set(hexHash, true);\n      let currentVote = this.voting_options.get(_vote_option) + 1;\n      this.voting_options.set(_vote_option, currentVote);\n      near.log(\"Vote succeeded.\");\n      return {result: true, error: \"Vote succeeded.\"};\n    }\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","TextEncoder","s","env","utf8_string_to_uint8array","bytes","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageWriteRaw","storage_write","storageWrite","storageRemoveRaw","storage_remove","storageRemove","inputRaw","input","sha256","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","data","LookupSet","contains","forEach","indexToKey","prefix","Uint32Array","array","Uint8Array","buffer","Vector","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","done","UnorderedMap","_keys","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","map","start","limit","ret","i","unorderedMap","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","args","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","VotingContract","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_class","_class2","owner_id","relayer_id","voting_keys","voters","voting_options","register_time","vote_time","init","_owner_id","_relayer_id","_register_time","_vote_time","addVotingKey","_secret_key","caller_id","keyExists","viewVotingKeys","viewTimeLimits","registerVoter","voterExists","viewVoters","addVotingOption","_voting_option","optionsExists","viewVotingOptions","castVote","_vote_option","encoder","encodedText","hash","hexHash","result","error","currentVote","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","onReturn","value_return"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,iBAAiB,CAAA;AACrB,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAACA,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;AACxD,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAAA;AACjD,MAAMC,QAAQ,GAAG,UAAU,CAAA;AAC3B,IAAIC,SAAS,CAAA;AACb,CAAC,UAAUA,SAAS,EAAE;AAClBA,EAAAA,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAA;AAC9BA,EAAAA,SAAS,CAAC,MAAM,CAAC,GAAG,MAAM,CAAA;AAC9B,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,EAAE,CAAC,CAAC,CAAA;AAC1B,MAAMC,sBAAsB,GAAG,wGAAwG,CAAA;AACvI,MAAMC,uBAAuB,GAAG,qBAAqB,CAAA;AAc5D;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,MAAMA,CAACC,UAAU,EAAEC,OAAO,EAAE;EACxC,IAAI,CAACD,UAAU,EAAE;AACb,IAAA,MAAM,IAAIE,KAAK,CAAC,oBAAoB,GAAGD,OAAO,CAAC,CAAA;AACnD,GAAA;AACJ,CAAA;AACO,SAASE,mBAAmBA,CAACC,KAAK,EAAEC,OAAO,GAAG;AACjDC,EAAAA,YAAY,EAAEC,WAAAA;AAClB,CAAC,EAAE;EACC,IAAIH,KAAK,KAAK,IAAI,EAAE;AAChB,IAAA,OAAOC,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,GAAA;AACA,EAAA,MAAMC,YAAY,GAAGF,WAAW,CAACH,KAAK,CAAC,CAAA;AACvC,EAAA,IAAIK,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAK,IAAI,EAAE;AACrD,IAAA,OAAOJ,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,GAAA;EACA,IAAIH,OAAO,EAAEM,aAAa,EAAE;AACxB,IAAA,OAAON,OAAO,CAACM,aAAa,CAACF,YAAY,CAAC,CAAA;AAC9C,GAAA;AACA,EAAA,OAAOA,YAAY,CAAA;AACvB,CAAA;AACO,SAASG,yBAAyBA,CAACR,KAAK,EAAE;AAAES,EAAAA,UAAAA;AAAW,CAAC,GAAG;AAC9DA,EAAAA,UAAU,EAAEC,SAAAA;AAChB,CAAC,EAAE;EACC,OAAOD,UAAU,CAACT,KAAK,CAAC,CAAA;AAC5B,CAAA;AACO,SAASU,SAASA,CAACC,gBAAgB,EAAE;AACxC,EAAA,OAAOC,MAAM,CAACC,IAAI,CAACC,SAAS,CAACH,gBAAgB,EAAE,UAAUI,GAAG,EAAEf,KAAK,EAAE;AACjE,IAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAO;AACHA,QAAAA,KAAK,EAAEA,KAAK,CAACgB,QAAQ,EAAE;QACvB,CAACzB,QAAQ,GAAGC,SAAS,CAACyB,MAAAA;OACzB,CAAA;AACL,KAAA;IACA,IAAI,OAAO,IAAI,CAACF,GAAG,CAAC,KAAK,QAAQ,IAC7B,IAAI,CAACA,GAAG,CAAC,KAAK,IAAI,IAClB,IAAI,CAACA,GAAG,CAAC,YAAYG,IAAI,EAAE;MAC3B,OAAO;QACHlB,KAAK,EAAE,IAAI,CAACe,GAAG,CAAC,CAACI,WAAW,EAAE;QAC9B,CAAC5B,QAAQ,GAAGC,SAAS,CAAC4B,IAAAA;OACzB,CAAA;AACL,KAAA;AACA,IAAA,OAAOpB,KAAK,CAAA;AAChB,GAAC,CAAC,CAAC,CAAA;AACP,CAAA;AACO,SAASG,WAAWA,CAACkB,kBAAkB,EAAE;AAC5C,EAAA,OAAOR,IAAI,CAACS,KAAK,CAACC,MAAM,CAACF,kBAAkB,CAAC,EAAE,CAACG,CAAC,EAAExB,KAAK,KAAK;AACxD,IAAA,IAAIA,KAAK,KAAK,IAAI,IACd,OAAOA,KAAK,KAAK,QAAQ,IACzByB,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC,CAAC2B,MAAM,KAAK,CAAC,IAC/BF,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC,CAAC4B,KAAK,CAAEb,GAAG,IAAK,CAAC,OAAO,EAAExB,QAAQ,CAAC,CAACsC,QAAQ,CAACd,GAAG,CAAC,CAAC,EAAE;MACtE,QAAQf,KAAK,CAACT,QAAQ,CAAC;QACnB,KAAKC,SAAS,CAACyB,MAAM;AACjB,UAAA,OAAOa,MAAM,CAAC9B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;QACjC,KAAKR,SAAS,CAAC4B,IAAI;AACf,UAAA,OAAO,IAAIF,IAAI,CAAClB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;AACvC,OAAA;AACJ,KAAA;AACA,IAAA,OAAOA,KAAK,CAAA;AAChB,GAAC,CAAC,CAAA;AACN,CAAA;AAYA;AACA;AACA;AACO,MAAM+B,WAAW,CAAC;EACrBnB,MAAMA,CAACoB,CAAC,EAAE;AACN,IAAA,OAAOC,GAAG,CAACC,yBAAyB,CAACF,CAAC,CAAC,CAAA;AAC3C,GAAA;AACJ,CAAA;AAoBA;AACA;AACA;AACA;AACA;AACO,SAASG,KAAKA,CAACH,CAAC,EAAE;AACrB,EAAA,OAAOC,GAAG,CAACG,2BAA2B,CAACJ,CAAC,CAAC,CAAA;AAC7C,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,GAAGA,CAACC,CAAC,EAAE;AACnB,EAAA,OAAOL,GAAG,CAACM,2BAA2B,CAACD,CAAC,CAAC,CAAA;AAC7C,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS1B,MAAMA,CAACoB,CAAC,EAAE;AACtB,EAAA,OAAOC,GAAG,CAACC,yBAAyB,CAACF,CAAC,CAAC,CAAA;AAC3C,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAST,MAAMA,CAACe,CAAC,EAAE;AACtB,EAAA,OAAOL,GAAG,CAACO,yBAAyB,CAACF,CAAC,CAAC,CAAA;AAC3C;;AC/JO,IAAIG,SAAS,CAAA;AACpB,CAAC,UAAUA,SAAS,EAAE;EAClBA,SAAS,CAACA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAA;EAC/CA,SAAS,CAACA,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAA;AACvD,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,EAAE,CAAC,CAAC,CAAA;AACjC,IAAIC,UAAU,CAAA;AACd,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAACA,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAA;EAClDA,UAAU,CAACA,UAAU,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW,CAAA;AAC1D,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,EAAE,CAAC,CAAC;;ACXnC;AACA;AACA;AACA;AACA;AACA;AACO,IAAIC,aAAa,CAAA;AACxB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAACA,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAA;EACzDA,aAAa,CAACA,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAA;EAC7DA,aAAa,CAACA,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAA;AACzD,CAAC,EAAEA,aAAa,KAAKA,aAAa,GAAG,EAAE,CAAC,CAAC,CAAA;AACzC;AACA;AACA;AACO,IAAIC,YAAY,CAAA;AACvB,CAAC,UAAUA,YAAY,EAAE;EACrBA,YAAY,CAACA,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAA;EACnDA,YAAY,CAACA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAA;AAC3D,CAAC,EAAEA,YAAY,KAAKA,YAAY,GAAG,EAAE,CAAC,CAAC;;ACjBvC,MAAMC,OAAO,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,CAAA;AAC9B,MAAMC,gBAAgB,GAAGD,OAAO,GAAG,EAAE,CAAA;AACrC;AACA;AACA;AACA;AACA;AACO,SAASE,GAAGA,CAAC,GAAGC,MAAM,EAAE;AAC3Bf,EAAAA,GAAG,CAACc,GAAG,CAACC,MAAM,CAACC,MAAM,CAAC,CAACC,WAAW,EAAEC,SAAS,EAAEC,KAAK,KAAK;AACrD;IACA,MAAMC,KAAK,GAAGF,SAAS,KAAK7C,SAAS,GAAG,WAAW,GAAG6C,SAAS,CAAA;AAC/D;AACA,IAAA,MAAMG,WAAW,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAGxC,IAAI,CAACC,SAAS,CAACuC,KAAK,CAAC,GAAI,CAAA,EAAEA,KAAM,CAAC,CAAA,CAAA;IAClF,IAAID,KAAK,KAAK,CAAC,EAAE;AACb,MAAA,OAAOE,WAAW,CAAA;AACtB,KAAA;AACA,IAAA,OAAQ,CAAEJ,EAAAA,WAAY,CAAGI,CAAAA,EAAAA,WAAY,CAAC,CAAA,CAAA;GACzC,EAAE,EAAE,CAAC,CAAC,CAAA;AACX,CAAA;AAiBA;AACA;AACA;AACA;AACO,SAASC,oBAAoBA,GAAG;AACnCtB,EAAAA,GAAG,CAACuB,sBAAsB,CAAC,CAAC,CAAC,CAAA;EAC7B,OAAOnB,GAAG,CAACJ,GAAG,CAACwB,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;AACpC,CAAA;AACA;AACA;AACA;AACO,SAASC,gBAAgBA,GAAG;AAC/BzB,EAAAA,GAAG,CAAC0B,kBAAkB,CAAC,CAAC,CAAC,CAAA;EACzB,OAAOtB,GAAG,CAACJ,GAAG,CAACwB,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;AACpC,CAAA;AAyBA;AACA;AACA;AACA;AACO,SAASG,eAAeA,GAAG;AAC9B,EAAA,OAAO3B,GAAG,CAAC4B,gBAAgB,EAAE,CAAA;AACjC,CAAA;AAyBA;AACA;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAAC/C,GAAG,EAAE;EAChC,MAAMgD,WAAW,GAAG9B,GAAG,CAAC+B,YAAY,CAACjD,GAAG,EAAE,CAAC,CAAC,CAAA;EAC5C,IAAIgD,WAAW,KAAK,EAAE,EAAE;AACpB,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACA,EAAA,OAAO9B,GAAG,CAACwB,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AAaA;AACA;AACA;AACA;AACA;AACO,SAASQ,gBAAgBA,CAAClD,GAAG,EAAE;AAClC,EAAA,OAAOkB,GAAG,CAACiC,eAAe,CAACnD,GAAG,CAAC,KAAK,EAAE,CAAA;AAC1C,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASoD,aAAaA,CAACpD,GAAG,EAAE;AAC/B,EAAA,OAAOkD,gBAAgB,CAACrD,MAAM,CAACG,GAAG,CAAC,CAAC,CAAA;AACxC,CAAA;AACA;AACA;AACA;AACO,SAASqD,oBAAoBA,GAAG;AACnC,EAAA,OAAOnC,GAAG,CAACwB,aAAa,CAACX,gBAAgB,CAAC,CAAA;AAC9C,CAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACO,SAASuB,eAAeA,CAACtD,GAAG,EAAEf,KAAK,EAAE;EACxC,OAAOiC,GAAG,CAACqC,aAAa,CAACvD,GAAG,EAAEf,KAAK,EAAE8C,gBAAgB,CAAC,KAAK,EAAE,CAAA;AACjE,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASyB,YAAYA,CAACxD,GAAG,EAAEf,KAAK,EAAE;EACrC,OAAOqE,eAAe,CAACzD,MAAM,CAACG,GAAG,CAAC,EAAEH,MAAM,CAACZ,KAAK,CAAC,CAAC,CAAA;AACtD,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASwE,gBAAgBA,CAACzD,GAAG,EAAE;EAClC,OAAOkB,GAAG,CAACwC,cAAc,CAAC1D,GAAG,EAAE+B,gBAAgB,CAAC,KAAK,EAAE,CAAA;AAC3D,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS4B,aAAaA,CAAC3D,GAAG,EAAE;AAC/B,EAAA,OAAOyD,gBAAgB,CAAC5D,MAAM,CAACG,GAAG,CAAC,CAAC,CAAA;AACxC,CAAA;AAOA;AACA;AACA;AACO,SAAS4D,QAAQA,GAAG;AACvB1C,EAAAA,GAAG,CAAC2C,KAAK,CAAC,CAAC,CAAC,CAAA;AACZ,EAAA,OAAO3C,GAAG,CAACwB,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AACA;AACA;AACA;AACO,SAASmB,KAAKA,GAAG;AACpB,EAAA,OAAOrD,MAAM,CAACoD,QAAQ,EAAE,CAAC,CAAA;AAC7B,CAAA;AAsQA;AACA;AACA;AACA;AACA;AACO,SAASE,MAAMA,CAAC7E,KAAK,EAAE;AAC1BiC,EAAAA,GAAG,CAAC4C,MAAM,CAAC7E,KAAK,EAAE,CAAC,CAAC,CAAA;AACpB,EAAA,OAAOiC,GAAG,CAACwB,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B;;ACreA;AACA;AACA;AACO,MAAMqB,SAAS,CAAC;AACnB;AACJ;AACA;EACIC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAA;AAC9B,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAAClE,GAAG,EAAE;AACb,IAAA,MAAMmE,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGjE,GAAG,CAAA;AACvC,IAAA,OAAOoE,aAAkB,CAACD,UAAU,CAAC,CAAA;AACzC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIE,EAAAA,GAAGA,CAACrE,GAAG,EAAEd,OAAO,EAAE;AACd,IAAA,MAAMiF,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGjE,GAAG,CAAA;IACvC,MAAMf,KAAK,GAAGmF,cAAmB,CAACvE,MAAM,CAACsE,UAAU,CAAC,CAAC,CAAA;AACrD,IAAA,OAAOnF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIoF,EAAAA,MAAMA,CAACtE,GAAG,EAAEd,OAAO,EAAE;AACjB,IAAA,MAAMiF,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGjE,GAAG,CAAA;AACvC,IAAA,IAAI,CAACoE,aAAkB,CAACD,UAAU,CAAC,EAAE;AACjC,MAAA,OAAOjF,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAMJ,KAAK,GAAGmF,oBAAyB,EAAE,CAAA;AACzC,IAAA,OAAOpF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIqF,EAAAA,GAAGA,CAACvE,GAAG,EAAEwE,QAAQ,EAAEtF,OAAO,EAAE;AACxB,IAAA,MAAMiF,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGjE,GAAG,CAAA;AACvC,IAAA,MAAMyE,YAAY,GAAGhF,yBAAyB,CAAC+E,QAAQ,EAAEtF,OAAO,CAAC,CAAA;AACjE,IAAA,IAAI,CAACkF,eAAoB,CAACvE,MAAM,CAACsE,UAAU,CAAC,EAAEM,YAAY,CAAC,EAAE;AACzD,MAAA,OAAOvF,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAMJ,KAAK,GAAGmF,oBAAyB,EAAE,CAAA;AACzC,IAAA,OAAOpF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIwF,EAAAA,MAAMA,CAACC,aAAa,EAAEzF,OAAO,EAAE;IAC3B,KAAK,MAAM,CAACc,GAAG,EAAEf,KAAK,CAAC,IAAI0F,aAAa,EAAE;MACtC,IAAI,CAACJ,GAAG,CAACvE,GAAG,EAAEf,KAAK,EAAEC,OAAO,CAAC,CAAA;AACjC,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIS,SAASA,CAACT,OAAO,EAAE;AACf,IAAA,OAAOO,yBAAyB,CAAC,IAAI,EAAEP,OAAO,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,OAAO0F,WAAWA,CAACC,IAAI,EAAE;AACrB,IAAA,OAAO,IAAId,SAAS,CAACc,IAAI,CAACZ,SAAS,CAAC,CAAA;AACxC,GAAA;AACJ;;ACvFA;AACA;AACA;AACO,MAAMa,SAAS,CAAC;AACnB;AACJ;AACA;EACId,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAA;AAC9B,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIc,EAAAA,QAAQA,CAAC/E,GAAG,EAAEd,OAAO,EAAE;IACnB,MAAMiF,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGxE,yBAAyB,CAACO,GAAG,EAAEd,OAAO,CAAC,CAAA;AAC3E,IAAA,OAAOkF,aAAkB,CAACD,UAAU,CAAC,CAAA;AACzC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIG,EAAAA,MAAMA,CAACtE,GAAG,EAAEd,OAAO,EAAE;IACjB,MAAMiF,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGxE,yBAAyB,CAACO,GAAG,EAAEd,OAAO,CAAC,CAAA;AAC3E,IAAA,OAAOkF,aAAkB,CAACD,UAAU,CAAC,CAAA;AACzC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACII,EAAAA,GAAGA,CAACvE,GAAG,EAAEd,OAAO,EAAE;IACd,MAAMiF,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGxE,yBAAyB,CAACO,GAAG,EAAEd,OAAO,CAAC,CAAA;IAC3E,OAAO,CAACkF,YAAiB,CAACD,UAAU,EAAE,EAAE,CAAC,CAAA;AAC7C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIO,EAAAA,MAAMA,CAAC/D,IAAI,EAAEzB,OAAO,EAAE;AAClByB,IAAAA,IAAI,CAACqE,OAAO,CAAEhF,GAAG,IAAK,IAAI,CAACuE,GAAG,CAACvE,GAAG,EAAEd,OAAO,CAAC,CAAC,CAAA;AACjD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIS,SAASA,CAACT,OAAO,EAAE;AACf,IAAA,OAAOO,yBAAyB,CAAC,IAAI,EAAEP,OAAO,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,OAAO0F,WAAWA,CAACC,IAAI,EAAE;AACrB,IAAA,OAAO,IAAIC,SAAS,CAACD,IAAI,CAACZ,SAAS,CAAC,CAAA;AACxC,GAAA;AACJ;;AClEA,SAASgB,UAAUA,CAACC,MAAM,EAAE7C,KAAK,EAAE;EAC/B,MAAMwC,IAAI,GAAG,IAAIM,WAAW,CAAC,CAAC9C,KAAK,CAAC,CAAC,CAAA;EACrC,MAAM+C,KAAK,GAAG,IAAIC,UAAU,CAACR,IAAI,CAACS,MAAM,CAAC,CAAA;AACzC,EAAA,MAAMtF,GAAG,GAAGsB,GAAG,CAAC8D,KAAK,CAAC,CAAA;EACtB,OAAOF,MAAM,GAAGlF,GAAG,CAAA;AACvB,CAAA;AACA;AACA;AACA;AACA;AACO,MAAMuF,MAAM,CAAC;AAChB;AACJ;AACA;AACA;AACIvB,EAAAA,WAAWA,CAACkB,MAAM,EAAEtE,MAAM,GAAG,CAAC,EAAE;IAC5B,IAAI,CAACsE,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACtE,MAAM,GAAGA,MAAM,CAAA;AACxB,GAAA;AACA;AACJ;AACA;AACI4E,EAAAA,OAAOA,GAAG;AACN,IAAA,OAAO,IAAI,CAAC5E,MAAM,KAAK,CAAC,CAAA;AAC5B,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIyD,EAAAA,GAAGA,CAAChC,KAAK,EAAEnD,OAAO,EAAE;AAChB,IAAA,IAAImD,KAAK,IAAI,IAAI,CAACzB,MAAM,EAAE;AACtB,MAAA,OAAO1B,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;IACA,MAAM8E,UAAU,GAAGc,UAAU,CAAC,IAAI,CAACC,MAAM,EAAE7C,KAAK,CAAC,CAAA;IACjD,MAAMpD,KAAK,GAAGmF,cAAmB,CAAChD,KAAK,CAAC+C,UAAU,CAAC,CAAC,CAAA;AACpD,IAAA,OAAOnF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIuG,EAAAA,UAAUA,CAACpD,KAAK,EAAEnD,OAAO,EAAE;IACvBN,MAAM,CAACyD,KAAK,GAAG,IAAI,CAACzB,MAAM,EAAEjC,uBAAuB,CAAC,CAAA;AACpD,IAAA,IAAI0D,KAAK,GAAG,CAAC,KAAK,IAAI,CAACzB,MAAM,EAAE;AAC3B,MAAA,OAAO,IAAI,CAAC8E,GAAG,CAACxG,OAAO,CAAC,CAAA;AAC5B,KAAA;IACA,MAAMc,GAAG,GAAGiF,UAAU,CAAC,IAAI,CAACC,MAAM,EAAE7C,KAAK,CAAC,CAAA;AAC1C,IAAA,MAAMsD,IAAI,GAAG,IAAI,CAACD,GAAG,CAACxG,OAAO,CAAC,CAAA;AAC9BN,IAAAA,MAAM,CAACwF,eAAoB,CAAChD,KAAK,CAACpB,GAAG,CAAC,EAAEP,yBAAyB,CAACkG,IAAI,EAAEzG,OAAO,CAAC,CAAC,EAAER,sBAAsB,CAAC,CAAA;AAC1G,IAAA,MAAMO,KAAK,GAAGmF,oBAAyB,EAAE,CAAA;AACzC,IAAA,OAAOpF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACI0G,EAAAA,IAAIA,CAACC,OAAO,EAAE3G,OAAO,EAAE;IACnB,MAAMc,GAAG,GAAGiF,UAAU,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACtE,MAAM,CAAC,CAAA;IAChD,IAAI,CAACA,MAAM,IAAI,CAAC,CAAA;AAChBwD,IAAAA,eAAoB,CAAChD,KAAK,CAACpB,GAAG,CAAC,EAAEP,yBAAyB,CAACoG,OAAO,EAAE3G,OAAO,CAAC,CAAC,CAAA;AACjF,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIwG,GAAGA,CAACxG,OAAO,EAAE;AACT,IAAA,IAAI,IAAI,CAACsG,OAAO,EAAE,EAAE;AAChB,MAAA,OAAOtG,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAMyG,SAAS,GAAG,IAAI,CAAClF,MAAM,GAAG,CAAC,CAAA;IACjC,MAAMmF,OAAO,GAAGd,UAAU,CAAC,IAAI,CAACC,MAAM,EAAEY,SAAS,CAAC,CAAA;IAClD,IAAI,CAAClF,MAAM,IAAI,CAAC,CAAA;AAChBhC,IAAAA,MAAM,CAACwF,gBAAqB,CAAChD,KAAK,CAAC2E,OAAO,CAAC,CAAC,EAAErH,sBAAsB,CAAC,CAAA;AACrE,IAAA,MAAMO,KAAK,GAAGmF,oBAAyB,EAAE,CAAA;AACzC,IAAA,OAAOpF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI8G,EAAAA,OAAOA,CAAC3D,KAAK,EAAEwD,OAAO,EAAE3G,OAAO,EAAE;IAC7BN,MAAM,CAACyD,KAAK,GAAG,IAAI,CAACzB,MAAM,EAAEjC,uBAAuB,CAAC,CAAA;IACpD,MAAMqB,GAAG,GAAGiF,UAAU,CAAC,IAAI,CAACC,MAAM,EAAE7C,KAAK,CAAC,CAAA;AAC1CzD,IAAAA,MAAM,CAACwF,eAAoB,CAAChD,KAAK,CAACpB,GAAG,CAAC,EAAEP,yBAAyB,CAACoG,OAAO,EAAE3G,OAAO,CAAC,CAAC,EAAER,sBAAsB,CAAC,CAAA;AAC7G,IAAA,MAAMO,KAAK,GAAGmF,oBAAyB,EAAE,CAAA;AACzC,IAAA,OAAOpF,mBAAmB,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIwF,MAAMA,CAACuB,QAAQ,EAAE;AACb,IAAA,KAAK,MAAMJ,OAAO,IAAII,QAAQ,EAAE;AAC5B,MAAA,IAAI,CAACL,IAAI,CAACC,OAAO,CAAC,CAAA;AACtB,KAAA;AACJ,GAAA;EACA,CAACK,MAAM,CAACC,QAAQ,CAAI,GAAA;AAChB,IAAA,OAAO,IAAIC,cAAc,CAAC,IAAI,CAAC,CAAA;AACnC,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIC,yBAAyBA,CAACnH,OAAO,EAAE;IAC/B,OAAO;MACH,CAACgH,MAAM,CAACC,QAAQ,GAAG,MAAM,IAAIC,cAAc,CAAC,IAAI,EAAElH,OAAO,CAAA;KAC5D,CAAA;AACL,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIoH,OAAOA,CAACpH,OAAO,EAAE;IACb,MAAMkG,KAAK,GAAG,EAAE,CAAA;IAChB,MAAMe,QAAQ,GAAGjH,OAAO,GAAG,IAAI,CAACmH,yBAAyB,CAACnH,OAAO,CAAC,GAAG,IAAI,CAAA;AACzE,IAAA,KAAK,MAAMD,KAAK,IAAIkH,QAAQ,EAAE;AAC1Bf,MAAAA,KAAK,CAACQ,IAAI,CAAC3G,KAAK,CAAC,CAAA;AACrB,KAAA;AACA,IAAA,OAAOmG,KAAK,CAAA;AAChB,GAAA;AACA;AACJ;AACA;AACImB,EAAAA,KAAKA,GAAG;AACJ,IAAA,KAAK,IAAIlE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACzB,MAAM,EAAEyB,KAAK,EAAE,EAAE;MAC9C,MAAMrC,GAAG,GAAGiF,UAAU,CAAC,IAAI,CAACC,MAAM,EAAE7C,KAAK,CAAC,CAAA;AAC1C+B,MAAAA,gBAAqB,CAAChD,KAAK,CAACpB,GAAG,CAAC,CAAC,CAAA;AACrC,KAAA;IACA,IAAI,CAACY,MAAM,GAAG,CAAC,CAAA;AACnB,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIjB,SAASA,CAACT,OAAO,EAAE;AACf,IAAA,OAAOO,yBAAyB,CAAC,IAAI,EAAEP,OAAO,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,OAAO0F,WAAWA,CAACC,IAAI,EAAE;AACrB,IAAA,MAAM2B,MAAM,GAAG,IAAIjB,MAAM,CAACV,IAAI,CAACK,MAAM,EAAEL,IAAI,CAACjE,MAAM,CAAC,CAAA;AACnD,IAAA,OAAO4F,MAAM,CAAA;AACjB,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACO,MAAMJ,cAAc,CAAC;AACxB;AACJ;AACA;AACA;AACIpC,EAAAA,WAAWA,CAACwC,MAAM,EAAEtH,OAAO,EAAE;IACzB,IAAI,CAACsH,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACtH,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAI,CAACuH,OAAO,GAAG,CAAC,CAAA;AACpB,GAAA;AACAC,EAAAA,IAAIA,GAAG;IACH,IAAI,IAAI,CAACD,OAAO,IAAI,IAAI,CAACD,MAAM,CAAC5F,MAAM,EAAE;MACpC,OAAO;AAAE3B,QAAAA,KAAK,EAAE,IAAI;AAAE0H,QAAAA,IAAI,EAAE,IAAA;OAAM,CAAA;AACtC,KAAA;AACA,IAAA,MAAM1H,KAAK,GAAG,IAAI,CAACuH,MAAM,CAACnC,GAAG,CAAC,IAAI,CAACoC,OAAO,EAAE,IAAI,CAACvH,OAAO,CAAC,CAAA;IACzD,IAAI,CAACuH,OAAO,IAAI,CAAC,CAAA;IACjB,OAAO;MAAExH,KAAK;AAAE0H,MAAAA,IAAI,EAAE,KAAA;KAAO,CAAA;AACjC,GAAA;AACJ;;ACvLA;AACA;AACA;AACO,MAAMC,YAAY,CAAC;AACtB;AACJ;AACA;EACI5C,WAAWA,CAACkB,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAAC2B,KAAK,GAAG,IAAItB,MAAM,CAAE,CAAA,EAAEL,MAAO,CAAA,CAAA,CAAE,CAAC,CAAC;IACtC,IAAI,CAAC4B,MAAM,GAAG,IAAI/C,SAAS,CAAE,CAAA,EAAEmB,MAAO,CAAA,CAAA,CAAE,CAAC,CAAA;AAC7C,GAAA;AACA;AACJ;AACA;EACI,IAAItE,MAAMA,GAAG;AACT,IAAA,OAAO,IAAI,CAACiG,KAAK,CAACjG,MAAM,CAAA;AAC5B,GAAA;AACA;AACJ;AACA;AACI4E,EAAAA,OAAOA,GAAG;AACN,IAAA,OAAO,IAAI,CAACqB,KAAK,CAACrB,OAAO,EAAE,CAAA;AAC/B,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACInB,EAAAA,GAAGA,CAACrE,GAAG,EAAEd,OAAO,EAAE;IACd,MAAM6H,aAAa,GAAG,IAAI,CAACD,MAAM,CAACzC,GAAG,CAACrE,GAAG,CAAC,CAAA;IAC1C,IAAI+G,aAAa,KAAK,IAAI,EAAE;AACxB,MAAA,OAAO7H,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAM,CAACJ,KAAK,CAAC,GAAG8H,aAAa,CAAA;IAC7B,OAAO/H,mBAAmB,CAACa,MAAM,CAACZ,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AACtD,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIqF,EAAAA,GAAGA,CAACvE,GAAG,EAAEf,KAAK,EAAEC,OAAO,EAAE;IACrB,MAAM6H,aAAa,GAAG,IAAI,CAACD,MAAM,CAACzC,GAAG,CAACrE,GAAG,CAAC,CAAA;AAC1C,IAAA,MAAMgH,UAAU,GAAGvH,yBAAyB,CAACR,KAAK,EAAEC,OAAO,CAAC,CAAA;IAC5D,IAAI6H,aAAa,KAAK,IAAI,EAAE;AACxB,MAAA,MAAME,eAAe,GAAG,IAAI,CAACrG,MAAM,CAAA;AACnC,MAAA,IAAI,CAACiG,KAAK,CAACjB,IAAI,CAAC5F,GAAG,CAAC,CAAA;AACpB,MAAA,IAAI,CAAC8G,MAAM,CAACvC,GAAG,CAACvE,GAAG,EAAE,CAACQ,MAAM,CAACwG,UAAU,CAAC,EAAEC,eAAe,CAAC,CAAC,CAAA;AAC3D,MAAA,OAAO,IAAI,CAAA;AACf,KAAA;AACA,IAAA,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGJ,aAAa,CAAA;AAC1C,IAAA,IAAI,CAACD,MAAM,CAACvC,GAAG,CAACvE,GAAG,EAAE,CAACQ,MAAM,CAACwG,UAAU,CAAC,EAAEG,QAAQ,CAAC,CAAC,CAAA;IACpD,OAAOnI,mBAAmB,CAACa,MAAM,CAACqH,QAAQ,CAAC,EAAEhI,OAAO,CAAC,CAAA;AACzD,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIoF,EAAAA,MAAMA,CAACtE,GAAG,EAAEd,OAAO,EAAE;IACjB,MAAMkI,gBAAgB,GAAG,IAAI,CAACN,MAAM,CAACxC,MAAM,CAACtE,GAAG,CAAC,CAAA;IAChD,IAAIoH,gBAAgB,KAAK,IAAI,EAAE;AAC3B,MAAA,OAAOlI,OAAO,EAAEG,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAM,CAACJ,KAAK,EAAEoD,KAAK,CAAC,GAAG+E,gBAAgB,CAAA;AACvCxI,IAAAA,MAAM,CAAC,IAAI,CAACiI,KAAK,CAACpB,UAAU,CAACpD,KAAK,CAAC,KAAK,IAAI,EAAE3D,sBAAsB,CAAC,CAAA;AACrE;AACA,IAAA,IAAI,CAAC,IAAI,CAACmI,KAAK,CAACrB,OAAO,EAAE,IAAInD,KAAK,KAAK,IAAI,CAACwE,KAAK,CAACjG,MAAM,EAAE;AACtD;MACA,MAAMyG,UAAU,GAAG,IAAI,CAACR,KAAK,CAACxC,GAAG,CAAChC,KAAK,CAAC,CAAA;MACxC,MAAMiF,oBAAoB,GAAG,IAAI,CAACR,MAAM,CAACzC,GAAG,CAACgD,UAAU,CAAC,CAAA;AACxDzI,MAAAA,MAAM,CAAC0I,oBAAoB,KAAK,IAAI,EAAE5I,sBAAsB,CAAC,CAAA;AAC7D,MAAA,IAAI,CAACoI,MAAM,CAACvC,GAAG,CAAC8C,UAAU,EAAE,CAACC,oBAAoB,CAAC,CAAC,CAAC,EAAEjF,KAAK,CAAC,CAAC,CAAA;AACjE,KAAA;IACA,OAAOrD,mBAAmB,CAACa,MAAM,CAACZ,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AACtD,GAAA;AACA;AACJ;AACA;AACIqH,EAAAA,KAAKA,GAAG;AACJ,IAAA,KAAK,MAAMvG,GAAG,IAAI,IAAI,CAAC6G,KAAK,EAAE;AAC1B;MACA,IAAI,CAACC,MAAM,CAACvC,GAAG,CAACvE,GAAG,EAAE,IAAI,CAAC,CAAA;AAC9B,KAAA;AACA,IAAA,IAAI,CAAC6G,KAAK,CAACN,KAAK,EAAE,CAAA;AACtB,GAAA;EACA,CAACL,MAAM,CAACC,QAAQ,CAAI,GAAA;AAChB,IAAA,OAAO,IAAIoB,oBAAoB,CAAC,IAAI,CAAC,CAAA;AACzC,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIlB,yBAAyBA,CAACnH,OAAO,EAAE;IAC/B,OAAO;MACH,CAACgH,MAAM,CAACC,QAAQ,GAAG,MAAM,IAAIoB,oBAAoB,CAAC,IAAI,EAAErI,OAAO,CAAA;KAClE,CAAA;AACL,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIoH,OAAOA,CAACpH,OAAO,EAAE;IACb,MAAMkG,KAAK,GAAG,EAAE,CAAA;IAChB,MAAMe,QAAQ,GAAGjH,OAAO,GAAG,IAAI,CAACmH,yBAAyB,CAACnH,OAAO,CAAC,GAAG,IAAI,CAAA;AACzE,IAAA,KAAK,MAAMD,KAAK,IAAIkH,QAAQ,EAAE;AAC1Bf,MAAAA,KAAK,CAACQ,IAAI,CAAC3G,KAAK,CAAC,CAAA;AACrB,KAAA;AACA,IAAA,OAAOmG,KAAK,CAAA;AAChB,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIV,MAAMA,CAACC,aAAa,EAAE;IAClB,KAAK,MAAM,CAAC3E,GAAG,EAAEf,KAAK,CAAC,IAAI0F,aAAa,EAAE;AACtC,MAAA,IAAI,CAACJ,GAAG,CAACvE,GAAG,EAAEf,KAAK,CAAC,CAAA;AACxB,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIU,SAASA,CAACT,OAAO,EAAE;AACf,IAAA,OAAOO,yBAAyB,CAAC,IAAI,EAAEP,OAAO,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,OAAO0F,WAAWA,CAACC,IAAI,EAAE;IACrB,MAAM2C,GAAG,GAAG,IAAIZ,YAAY,CAAC/B,IAAI,CAACK,MAAM,CAAC,CAAA;AACzC;IACAsC,GAAG,CAACX,KAAK,GAAG,IAAItB,MAAM,CAAE,CAAA,EAAEV,IAAI,CAACK,MAAO,CAAA,CAAA,CAAE,CAAC,CAAA;IACzCsC,GAAG,CAACX,KAAK,CAACjG,MAAM,GAAGiE,IAAI,CAACgC,KAAK,CAACjG,MAAM,CAAA;AACpC;IACA4G,GAAG,CAACV,MAAM,GAAG,IAAI/C,SAAS,CAAE,CAAA,EAAEc,IAAI,CAACK,MAAO,CAAA,CAAA,CAAE,CAAC,CAAA;AAC7C,IAAA,OAAOsC,GAAG,CAAA;AACd,GAAA;AACA7G,EAAAA,IAAIA,CAAC;IAAE8G,KAAK;AAAEC,IAAAA,KAAAA;AAAM,GAAC,EAAE;IACnB,MAAMC,GAAG,GAAG,EAAE,CAAA;IACd,IAAIF,KAAK,KAAKlI,SAAS,EAAE;AACrBkI,MAAAA,KAAK,GAAG,CAAC,CAAA;AACb,KAAA;IACA,IAAIC,KAAK,IAAInI,SAAS,EAAE;AACpBmI,MAAAA,KAAK,GAAG,IAAI,CAAC9G,MAAM,GAAG6G,KAAK,CAAA;AAC/B,KAAA;AACA,IAAA,KAAK,IAAIG,CAAC,GAAGH,KAAK,EAAEG,CAAC,GAAGH,KAAK,GAAGC,KAAK,EAAEE,CAAC,EAAE,EAAE;MACxCD,GAAG,CAAC/B,IAAI,CAAC,IAAI,CAACiB,KAAK,CAACxC,GAAG,CAACuD,CAAC,CAAC,CAAC,CAAA;AAC/B,KAAA;AACA,IAAA,OAAOD,GAAG,CAAA;AACd,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA,MAAMJ,oBAAoB,CAAC;AACvB;AACJ;AACA;AACA;AACIvD,EAAAA,WAAWA,CAAC6D,YAAY,EAAE3I,OAAO,EAAE;IAC/B,IAAI,CAACA,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAI,CAACyB,IAAI,GAAG,IAAIyF,cAAc,CAACyB,YAAY,CAAChB,KAAK,CAAC,CAAA;AAClD,IAAA,IAAI,CAACW,GAAG,GAAGK,YAAY,CAACf,MAAM,CAAA;AAClC,GAAA;AACAJ,EAAAA,IAAIA,GAAG;IACH,MAAM1G,GAAG,GAAG,IAAI,CAACW,IAAI,CAAC+F,IAAI,EAAE,CAAA;IAC5B,IAAI1G,GAAG,CAAC2G,IAAI,EAAE;MACV,OAAO;AAAE1H,QAAAA,KAAK,EAAE,CAACe,GAAG,CAACf,KAAK,EAAE,IAAI,CAAC;QAAE0H,IAAI,EAAE3G,GAAG,CAAC2G,IAAAA;OAAM,CAAA;AACvD,KAAA;IACA,MAAMI,aAAa,GAAG,IAAI,CAACS,GAAG,CAACnD,GAAG,CAACrE,GAAG,CAACf,KAAK,CAAC,CAAA;AAC7CL,IAAAA,MAAM,CAACmI,aAAa,KAAK,IAAI,EAAErI,sBAAsB,CAAC,CAAA;IACtD,OAAO;MACHiI,IAAI,EAAE3G,GAAG,CAAC2G,IAAI;AACd1H,MAAAA,KAAK,EAAE,CACHe,GAAG,CAACf,KAAK,EACTD,mBAAmB,CAACa,MAAM,CAACkH,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC7H,OAAO,CAAC,CAAA;KAElE,CAAA;AACL,GAAA;AACJ;;AChMA;AACA;AACA;AACA;AACA;AACO,SAAS4I,UAAUA,CAACC,MAAM,EAAE;AAC/B;AACA,EAAA,OAAO,UAAUC,OAAO,EAAEC,IAAI,EAAEC,WAAAA;AAChC;AAAA,IACE,EAAG,CAAA;AACT,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,IAAIA,CAACJ,MAAM,EAAE;AACzB;AACA,EAAA,OAAO,UAAUC,OAAO,EAAEC,IAAI,EAAEC,WAAAA;AAChC;AAAA,IACE,EAAG,CAAA;AACT,CAAA;AACO,SAASE,IAAIA,CAAC;AAAEC,EAAAA,eAAe,GAAG,KAAK;AAAEC,EAAAA,eAAe,GAAG,KAAA;AAAO,CAAC,EAAE;AACxE;AACA,EAAA,OAAO,UAAUN,OAAO,EAAEC,IAAI,EAAEM,UAAU,EAAE;AACxC,IAAA,MAAMC,cAAc,GAAGD,UAAU,CAACtJ,KAAK,CAAA;AACvC;AACA;AACAsJ,IAAAA,UAAU,CAACtJ,KAAK,GAAG,UAAU,GAAGwJ,IAAI,EAAE;AAClC,MAAA,IAAIJ,eAAe,IACfjE,oBAAyB,EAAE,KAAKA,gBAAqB,EAAE,EAAE;AACzD,QAAA,MAAM,IAAIrF,KAAK,CAAC,qBAAqB,CAAC,CAAA;AAC1C,OAAA;MACA,IAAI,CAACuJ,eAAe,IAAIlE,eAAoB,EAAE,GAAG,EAAE,EAAE;AACjD,QAAA,MAAM,IAAIrF,KAAK,CAAC,yBAAyB,CAAC,CAAA;AAC9C,OAAA;AACA,MAAA,OAAOyJ,cAAc,CAACE,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC,CAAA;KAC1C,CAAA;GACJ,CAAA;AACL,CAAA;AAwBO,SAASE,WAAWA,CAAC;AAAEC,EAAAA,WAAW,GAAG,KAAK;AAAElJ,EAAAA,UAAU,GAAGC,SAAS;AAAER,EAAAA,YAAY,GAAGC,WAAAA;AAAa,CAAC,EAAE;AACtG;AACA,EAAA,OAAQyJ,MAAM,IAAK;IACf,OAAO,cAAcA,MAAM,CAAC;MACxB,OAAOC,OAAOA,GAAG;QACb,OAAO,IAAID,MAAM,EAAE,CAAA;AACvB,OAAA;MACA,OAAOE,SAASA,GAAG;QACf,MAAMC,QAAQ,GAAG5E,cAAmB,CAAChD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;QACpD,OAAO4H,QAAQ,GAAG,IAAI,CAACC,YAAY,CAACD,QAAQ,CAAC,GAAG,IAAI,CAAA;AACxD,OAAA;MACA,OAAOE,cAAcA,CAACC,YAAY,EAAE;AAChC/E,QAAAA,eAAoB,CAAChD,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,CAACgI,UAAU,CAACD,YAAY,CAAC,CAAC,CAAA;AACvE,OAAA;MACA,OAAOE,QAAQA,GAAG;QACd,OAAOvJ,IAAI,CAACS,KAAK,CAAC6D,KAAU,EAAE,IAAI,IAAI,CAAC,CAAA;AAC3C,OAAA;AACA,MAAA,OAAOgF,UAAUA,CAACnK,KAAK,EAAEqK,SAAS,GAAG,KAAK,EAAE;AACxC,QAAA,IAAIA,SAAS,EAAE;UACX,OAAOzJ,MAAM,CAACC,IAAI,CAACC,SAAS,CAACd,KAAK,EAAE,CAACwB,CAAC,EAAExB,KAAK,KAAK,OAAOA,KAAK,KAAK,QAAQ,GAAI,CAAA,EAAEA,KAAM,CAAC,CAAA,GAAGA,KAAK,CAAC,CAAC,CAAA;AACtG,SAAA;QACA,OAAOS,UAAU,CAACT,KAAK,CAAC,CAAA;AAC5B,OAAA;MACA,OAAOgK,YAAYA,CAAChK,KAAK,EAAE;QACvB,OAAOE,YAAY,CAACF,KAAK,CAAC,CAAA;AAC9B,OAAA;AACA,MAAA,OAAOsK,YAAYA,CAACC,WAAW,EAAEC,WAAW,EAAE;AAC1C,QAAA,KAAK,MAAMC,IAAI,IAAIF,WAAW,EAAE;UAC5B,MAAMhK,aAAa,GAAGgK,WAAW,CAACE,IAAI,CAAC,CAAC1F,WAAW,EAAEY,WAAW,CAAA;AAChE4E,UAAAA,WAAW,CAACE,IAAI,CAAC,GAAGlK,aAAa,GAC3BA,aAAa,CAACiK,WAAW,CAACC,IAAI,CAAC,CAAC,GAChCD,WAAW,CAACC,IAAI,CAAC,CAAA;AAC3B,SAAA;AACA,QAAA,OAAOF,WAAW,CAAA;AACtB,OAAA;MACA,OAAOG,YAAYA,GAAG;AAClB,QAAA,OAAOf,WAAW,CAAA;AACtB,OAAA;KACH,CAAA;GACJ,CAAA;AACL;;;AC5FA,IACagB,cAAc,IAAAC,IAAA,GAD1BlB,WAAW,CAAC;AAAEC,EAAAA,WAAW,EAAE,IAAA;AAAK,CAAC,CAAC,EAAAkB,KAAA,GAYhChC,UAAU,CAAG,CAAC,EAAAiC,KAAA,GAUd3B,IAAI,CAAC,EAAE,CAAC,EAAA4B,KAAA,GAqBR7B,IAAI,CAAG,CAAC,EAAA8B,KAAA,GAKR9B,IAAI,CAAG,CAAC,EAAA+B,KAAA,GAKR9B,IAAI,CAAC,EAAE,CAAC,EAAA+B,KAAA,GAcRhC,IAAI,CAAG,CAAC,EAAAiC,KAAA,GAKRhC,IAAI,CAAC,EAAE,CAAC,EAAAiC,KAAA,GAqBRlC,IAAI,CAAG,CAAC,EAAAmC,MAAA,GAKRlC,IAAI,CAAC,EAAE,CAAC,EAAAyB,IAAA,CAAAU,MAAA,IAAAC,OAAA,GAlGX,MACaZ,cAAc,CAAC;AAC1Ba,EAAAA,QAAQ,GAAW,EAAE,CAAA;AACrBC,EAAAA,UAAU,GAAW,EAAE,CAAA;AACvBC,EAAAA,WAAW,GAA0B,IAAI/D,YAAY,CAAU,aAAa,CAAC,CAAA;AAC7EgE,EAAAA,MAAM,GAAsB,IAAI9F,SAAS,CAAS,QAAQ,CAAC,CAAA;AAC3D+F,EAAAA,cAAc,GAAyB,IAAIjE,YAAY,CACrD,cACF,CAAC,CAAA;AACDkE,EAAAA,aAAa,GAAW,CAAC,CAAA;AACzBC,EAAAA,SAAS,GAAW,CAAC,CAAA;AAGrBC,EAAAA,IAAIA,CAAC;IAAEC,SAAS;IAAEC,WAAW;IAAEC,cAAc;AAAEC,IAAAA,UAAAA;AAAW,GAAC,EAAE;IAC3D,IAAI,CAACX,QAAQ,GAAGQ,SAAS,CAAA;IACzB,IAAI,CAACP,UAAU,GAAGQ,WAAW,CAAA;IAC7B,IAAI,CAACJ,aAAa,GAAGK,cAAc,CAAA;IACnC,IAAI,CAACJ,SAAS,GAAGK,UAAU,CAAA;AAC7B,GAAA;EAEApH,WAAWA,GAAG,EAAC;AAGfqH,EAAAA,YAAYA,CAAC;AAAEC,IAAAA,WAAAA;AAAY,GAAC,EAAE;AAC5B,IAAA,MAAMC,SAAS,GAAGnH,oBAAyB,EAAE,CAAA;IAE7CxF,MAAM,CACJ2M,SAAS,IAAI,IAAI,CAACb,UAAU,EAC5B,0CACF,CAAC,CAAA;IAED,MAAMc,SAAyB,GAAG,IAAI,CAACb,WAAW,CAACtG,GAAG,CAACiH,WAAW,CAAC,CAAA;IAEnE,IAAIE,SAAS,IAAI,IAAI,EAAE;AACrBpH,MAAAA,GAAQ,CAAC,gCAAgC,CAAC,CAAA;MAC1C,IAAI,CAACuG,WAAW,CAACpG,GAAG,CAAC+G,WAAW,EAAE,KAAK,CAAC,CAAA;AACxC,MAAA,OAAO,IAAI,CAAA;AACb,KAAC,MAAM;AACLlH,MAAAA,GAAQ,CAAC,8BAA8B,CAAC,CAAA;AACxC,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;AACF,GAAA;AAGAqH,EAAAA,cAAcA,GAAG;IACf,OAAO,IAAI,CAACd,WAAW,CAAC9D,KAAK,CAACP,OAAO,EAAE,CAAA;AACzC,GAAA;AAGAoF,EAAAA,cAAcA,GAAG;IACf,OAAO5L,IAAI,CAACC,SAAS,CAAC;MAACgL,SAAS,EAAE,IAAI,CAACA,SAAS;MAAED,aAAa,EAAE,IAAI,CAACA,aAAAA;AAAa,KAAC,CAAC,CAAA;AACvF,GAAA;AAGAa,EAAAA,aAAaA,GAAG;AACd,IAAA,MAAMJ,SAAS,GAAGnH,oBAAyB,EAAE,CAAA;IAC7C,MAAMwH,WAAW,GAAG,IAAI,CAAChB,MAAM,CAAC7F,QAAQ,CAACwG,SAAS,CAAC,CAAA;AAEnD,IAAA,IAAIK,WAAW,EAAE;AACfxH,MAAAA,GAAQ,CAAC,2BAA2B,CAAC,CAAA;AACrC,MAAA,OAAO,KAAK,CAAA;AACd,KAAC,MAAM;AACL,MAAA,IAAI,CAACwG,MAAM,CAACrG,GAAG,CAACgH,SAAS,CAAC,CAAA;AAC1B,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AACF,GAAA;AAGAM,EAAAA,UAAUA,GAAG;IACX,OAAO,IAAI,CAACjB,MAAM,CAAA;AACpB,GAAA;AAGAkB,EAAAA,eAAeA,CAAC;AAAEC,IAAAA,cAAAA;AAAe,GAAC,EAAE;AAClC,IAAA,MAAMR,SAAS,GAAGnH,oBAAyB,EAAE,CAAA;IAE7CxF,MAAM,CACJ2M,SAAS,IAAI,IAAI,CAACd,QAAQ,EAC1B,4CACF,CAAC,CAAA;IAED,MAAMuB,aAA4B,GAChC,IAAI,CAACnB,cAAc,CAACxG,GAAG,CAAC0H,cAAc,CAAC,CAAA;IAEzC,IAAIC,aAAa,IAAI,IAAI,EAAE;MACzB,IAAI,CAACnB,cAAc,CAACtG,GAAG,CAACwH,cAAc,EAAE,CAAC,CAAC,CAAA;AAC1C,MAAA,OAAO,IAAI,CAAA;AACb,KAAC,MAAM;AACL3H,MAAAA,GAAQ,CAAC,8BAA8B,CAAC,CAAA;AACxC,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;AACF,GAAA;AAGA6H,EAAAA,iBAAiBA,GAAG;AAClB,IAAA,OAAO,IAAI,CAACpB,cAAc,CAACvE,OAAO,EAAE,CAAA;AACtC,GAAA;AAGA4F,EAAAA,QAAQA,CAAC;IAAEZ,WAAW;AAAEa,IAAAA,YAAAA;AAAa,GAAC,EAAE;AACtC,IAAA,MAAMZ,SAAS,GAAGnH,oBAAyB,EAAE,CAAA;IAE7CxF,MAAM,CACJ2M,SAAS,IAAI,IAAI,CAACb,UAAU,EAC5B,wDACF,CAAC,CAAA;AAGD,IAAA,MAAM0B,OAAO,GAAG,IAAIpL,WAAW,EAAE,CAAA;AACjC,IAAA,MAAMqL,WAAW,GAAGD,OAAO,CAACvM,MAAM,CAACyL,WAAW,CAAC,CAAA;AAC/C,IAAA,MAAMgB,IAAI,GAAGxI,MAAM,CAACuI,WAAW,CAAC,CAAA;AAChC,IAAA,MAAME,OAAO,GAAGD,IAAI,CAACrM,QAAQ,EAAE,CAAA;IAE/B,MAAMuL,SAAyB,GAAG,IAAI,CAACb,WAAW,CAACtG,GAAG,CAACkI,OAAO,CAAC,CAAA;IAE/D,IAAIf,SAAS,IAAI,IAAI,EAAE;AACrBpH,MAAAA,GAAQ,CAAC,uBAAuB,CAAC,CAAA;MACjC,OAAO;AAACoI,QAAAA,MAAM,EAAE,KAAK;AAAEC,QAAAA,KAAK,EAAE,uBAAA;OAAwB,CAAA;AACxD,KAAC,MAAM;AACL,MAAA,IAAIjB,SAAS,EAAE;AACbpH,QAAAA,GAAQ,CAAC,0BAA0B,CAAC,CAAA;QACpC,OAAO;AAACoI,UAAAA,MAAM,EAAE,KAAK;AAAEC,UAAAA,KAAK,EAAE,0BAAA;SAA2B,CAAA;AAC3D,OAAA;AACF,KAAA;IAEA,MAAMT,aAA4B,GAAG,IAAI,CAACnB,cAAc,CAACxG,GAAG,CAAC8H,YAAY,CAAC,CAAA;IAE1E,IAAIH,aAAa,IAAI,IAAI,EAAE;AACzB5H,MAAAA,GAAQ,CAAC,wBAAwB,CAAC,CAAA;AAClC,MAAA,OAAO,KAAK,CAAA;AACd,KAAC,MAAM;MACL,IAAI,CAACuG,WAAW,CAACpG,GAAG,CAACgI,OAAO,EAAE,IAAI,CAAC,CAAA;MACnC,IAAIG,WAAW,GAAG,IAAI,CAAC7B,cAAc,CAACxG,GAAG,CAAC8H,YAAY,CAAC,GAAG,CAAC,CAAA;MAC3D,IAAI,CAACtB,cAAc,CAACtG,GAAG,CAAC4H,YAAY,EAAEO,WAAW,CAAC,CAAA;AAClDtI,MAAAA,GAAQ,CAAC,iBAAiB,CAAC,CAAA;MAC3B,OAAO;AAACoI,QAAAA,MAAM,EAAE,IAAI;AAAEC,QAAAA,KAAK,EAAE,iBAAA;OAAkB,CAAA;AACjD,KAAA;AACF,GAAA;AACF,CAAC,GAAAE,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,WAAA9C,KAAA,CAAA,EAAApJ,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,EAAApC,MAAAA,CAAAA,EAAAA,OAAA,CAAAoC,SAAA,CAAA,EAAAD,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,mBAAA7C,KAAA,CAAA,EAAArJ,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,EAAApC,cAAAA,CAAAA,EAAAA,OAAA,CAAAoC,SAAA,CAAA,EAAAD,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,qBAAA5C,KAAA,CAAA,EAAAtJ,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,EAAApC,gBAAAA,CAAAA,EAAAA,OAAA,CAAAoC,SAAA,CAAA,EAAAD,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,EAAA,gBAAA,EAAA,CAAA3C,KAAA,CAAAvJ,EAAAA,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,qBAAApC,OAAA,CAAAoC,SAAA,CAAAD,EAAAA,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,EAAA1C,eAAAA,EAAAA,CAAAA,KAAA,GAAAxJ,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,oBAAApC,OAAA,CAAAoC,SAAA,CAAAD,EAAAA,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,EAAAzC,YAAAA,EAAAA,CAAAA,KAAA,GAAAzJ,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,EAAA,YAAA,CAAA,EAAApC,OAAA,CAAAoC,SAAA,GAAAD,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,sBAAAxC,KAAA,CAAA,EAAA1J,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,EAAApC,iBAAAA,CAAAA,EAAAA,OAAA,CAAAoC,SAAA,GAAAD,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,wBAAAvC,KAAA,CAAA,EAAA3J,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,EAAApC,mBAAAA,CAAAA,EAAAA,OAAA,CAAAoC,SAAA,CAAA,EAAAD,yBAAA,CAAAnC,OAAA,CAAAoC,SAAA,EAAA,UAAA,EAAA,CAAAtC,MAAA,CAAA5J,EAAAA,MAAA,CAAAmM,wBAAA,CAAArC,OAAA,CAAAoC,SAAA,eAAApC,OAAA,CAAAoC,SAAA,CAAApC,GAAAA,OAAA,MAAAD,MAAA,EAAA;AAAA,SAAA2B,QAAA,GAAA;AAAA,EAAA,MAAAY,MAAA,GAzIYlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAAb,QAAA,CAAAc,KAAA,CAAA,CAAA;EAAdpD,cAAc,CAAAV,cAAA,CAAA6D,SAAA,CAAA,CAAA;AAAA,EAAA,IAAAE,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAAhB,iBAAA,GAAA;AAAA,EAAA,MAAAa,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAAd,iBAAA,CAAAe,KAAA,CAAA,CAAA;AAAA,EAAA,IAAAC,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAAnB,eAAA,GAAA;AAAA,EAAA,MAAAgB,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAAjB,eAAA,CAAAkB,KAAA,CAAA,CAAA;EAAdpD,cAAc,CAAAV,cAAA,CAAA6D,SAAA,CAAA,CAAA;AAAA,EAAA,IAAAE,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAApB,UAAA,GAAA;AAAA,EAAA,MAAAiB,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAAlB,UAAA,CAAAmB,KAAA,CAAA,CAAA;AAAA,EAAA,IAAAC,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAAtB,aAAA,GAAA;AAAA,EAAA,MAAAmB,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAApB,aAAA,CAAAqB,KAAA,CAAA,CAAA;EAAdpD,cAAc,CAAAV,cAAA,CAAA6D,SAAA,CAAA,CAAA;AAAA,EAAA,IAAAE,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAAvB,cAAA,GAAA;AAAA,EAAA,MAAAoB,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAArB,cAAA,CAAAsB,KAAA,CAAA,CAAA;AAAA,EAAA,IAAAC,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAAxB,cAAA,GAAA;AAAA,EAAA,MAAAqB,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAAtB,cAAA,CAAAuB,KAAA,CAAA,CAAA;AAAA,EAAA,IAAAC,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA5B,YAAA,GAAA;AAAA,EAAA,MAAAyB,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA+D,MAAA,IAAdlD,cAAc,CAAAD,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA5K,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,IAAAgE,MAAA,EAAA;AAAdlD,IAAAA,cAAc,CAAAL,YAAA,CAAAwD,SAAA,EAAAD,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAA1B,YAAA,CAAA2B,KAAA,CAAA,CAAA;EAAdpD,cAAc,CAAAV,cAAA,CAAA6D,SAAA,CAAA,CAAA;AAAA,EAAA,IAAAE,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAAjC,IAAA,GAAA;AAAA,EAAA,MAAA8B,MAAA,GAAdlD,cAAc,CAAAb,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA+D,MAAA,EAAA;AAAA,IAAA,MAAA,IAAA/N,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAAgO,SAAA,GAAdnD,cAAc,CAAAd,OAAA,EAAA,CAAA;AAAA,EAAA,MAAAkE,KAAA,GAAdpD,cAAc,CAAAP,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA4D,OAAA,GAAAF,SAAA,CAAA/B,IAAA,CAAAgC,KAAA,CAAA,CAAA;EAAdpD,cAAc,CAAAV,cAAA,CAAA6D,SAAA,CAAA,CAAA;AAAA,EAAA,IAAAE,OAAA,KAAA1N,SAAA,EAAA,IAAA0N,OAAA,IAAAA,OAAA,CAAAjJ,WAAA,IAAAiJ,OAAA,CAAAjJ,WAAA,CAAAkJ,IAAA,KAAA,aAAA,EAAAD,OAAA,CAAAE,QAAA,EAAA,CAAA,KAAAjM,GAAA,CAAAkM,YAAA,CAAdxD,cAAc,CAAAR,UAAA,CAAA6D,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA;;;;"}